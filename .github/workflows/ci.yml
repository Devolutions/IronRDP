name: CI

on:
  push:
    branches:
      - master
  pull_request:
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:

jobs:
  formatting:
    name: Check formatting
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Check formatting
        shell: pwsh
        run: |
          Write-Host "Check formatting"
          cargo fmt --all -- --check

          if ($LastExitCode -eq 1) {   
            throw "Bad formatting, please run 'cargo +stable fmt --all'"
          }
  
  lints:
    name: Lints
    runs-on: ubuntu-20.04
    needs: formatting

    steps:
      - uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            ./target/
          key: ${{ runner.os }}-${{ hashFiles('Cargo.lock') }}

      - name: Check clippy
        run: cargo clippy --workspace -- -D warnings

  wasm:
    name: WASM target
    runs-on: ubuntu-latest
    needs: formatting

    steps:
      - uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            ./ffi/wasm/target/
          key: ${{ runner.os }}-wasm-${{ hashFiles('Cargo.lock') }}

      - name: Prepare runner
        run: sudo apt install wabt

      - name: Check
        shell: pwsh
        run: ./ffi/wasm/check.ps1

  tests:
    name: Tests [${{ matrix.os }}]
    runs-on: ${{ matrix.runner }}
    needs: formatting
    strategy:
      fail-fast: false
      matrix:
        os: [ windows, linux ]
        include:
          - os: windows
            runner: windows-2019
          - os: linux
            runner: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            ./target/
          key: ${{ runner.os }}-${{ hashFiles('Cargo.lock') }}

      - name: Test [${{ matrix.os }}]
        run: cargo test --workspace

  fuzz:
    name: Fuzzing
    runs-on: ubuntu-20.04
    needs: formatting

    steps:
      - uses: actions/checkout@v3

      - name: Fuzz build cache
        uses: actions/cache@v3
        with:
          path: |
            ./fuzz/target/
            ./artifacts/
          key: ${{ runner.os }}-fuzz-${{ hashFiles('./fuzz/Cargo.lock') }}

      - name: Fuzz corpus cache
        uses: actions/cache@v3
        with:
          path: |
            ./fuzz/corpus/
          key: fuzz-corpus-cache

      - name: Prepare runner
        run: |
          cd ./fuzz/
          cargo install cargo-fuzz
          rustup install nightly --profile=minimal

      - name: Fuzz
        run: |
          rustup run nightly cargo fuzz run pdu_decoding -- -max_total_time=3s
          rustup run nightly cargo fuzz run rle_decompression -- -max_total_time=3s
