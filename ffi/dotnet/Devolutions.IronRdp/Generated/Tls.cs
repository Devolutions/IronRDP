// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp;

#nullable enable

public partial class Tls: IDisposable
{
    private unsafe Raw.Tls* _inner;

    /// <summary>
    /// Creates a managed <c>Tls</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe Tls(Raw.Tls* handle)
    {
        _inner = handle;
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>TlsUpgradeResult</c> allocated on Rust side.
    /// </returns>
    public static TlsUpgradeResult TlsUpgrade(StdTcpStream stream, string serverName)
    {
        unsafe
        {
            byte[] serverNameBuf = DiplomatUtils.StringToUtf8(serverName);
            nuint serverNameBufLength = (nuint)serverNameBuf.Length;
            Raw.StdTcpStream* streamRaw;
            streamRaw = stream.AsFFI();
            if (streamRaw == null)
            {
                throw new ObjectDisposedException("StdTcpStream");
            }
            fixed (byte* serverNameBufPtr = serverNameBuf)
            {
                Raw.TlsFfiResultBoxTlsUpgradeResultBoxIronRdpError result = Raw.Tls.TlsUpgrade(streamRaw, serverNameBufPtr, serverNameBufLength);
                if (!result.isOk)
                {
                    throw new IronRdpException(new IronRdpError(result.Err));
                }
                Raw.TlsUpgradeResult* retVal = result.Ok;
                return new TlsUpgradeResult(retVal);
            }
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.Tls* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.Tls.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~Tls()
    {
        Dispose();
    }
}
