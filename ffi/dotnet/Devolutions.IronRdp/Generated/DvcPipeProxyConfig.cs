// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp;

#nullable enable

public partial class DvcPipeProxyConfig: IDisposable
{
    private unsafe Raw.DvcPipeProxyConfig* _inner;

    public DvcPipeProxyMessageSink MessageSink
    {
        get
        {
            return GetMessageSink();
        }
    }

    /// <summary>
    /// Creates a managed <c>DvcPipeProxyConfig</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe DvcPipeProxyConfig(Raw.DvcPipeProxyConfig* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>DvcPipeProxyConfig</c> allocated on Rust side.
    /// </returns>
    public static DvcPipeProxyConfig New(DvcPipeProxyMessageSink messageSink)
    {
        unsafe
        {
            Raw.DvcPipeProxyMessageSink* messageSinkRaw;
            messageSinkRaw = messageSink.AsFFI();
            if (messageSinkRaw == null)
            {
                throw new ObjectDisposedException("DvcPipeProxyMessageSink");
            }
            Raw.DvcPipeProxyConfig* retVal = Raw.DvcPipeProxyConfig.New(messageSinkRaw);
            return new DvcPipeProxyConfig(retVal);
        }
    }

    public void AddPipeProxy(DvcPipeProxyDescriptor descriptor)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("DvcPipeProxyConfig");
            }
            Raw.DvcPipeProxyDescriptor* descriptorRaw;
            descriptorRaw = descriptor.AsFFI();
            if (descriptorRaw == null)
            {
                throw new ObjectDisposedException("DvcPipeProxyDescriptor");
            }
            Raw.DvcPipeProxyConfig.AddPipeProxy(_inner, descriptorRaw);
        }
    }

    /// <returns>
    /// A <c>DvcPipeProxyMessageSink</c> allocated on Rust side.
    /// </returns>
    public DvcPipeProxyMessageSink GetMessageSink()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("DvcPipeProxyConfig");
            }
            Raw.DvcPipeProxyMessageSink* retVal = Raw.DvcPipeProxyConfig.GetMessageSink(_inner);
            return new DvcPipeProxyMessageSink(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.DvcPipeProxyConfig* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.DvcPipeProxyConfig.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~DvcPipeProxyConfig()
    {
        Dispose();
    }
}
