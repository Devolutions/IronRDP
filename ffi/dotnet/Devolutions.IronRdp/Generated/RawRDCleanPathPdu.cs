// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp.Raw;

#nullable enable

[StructLayout(LayoutKind.Sequential)]
public partial struct RDCleanPathPdu
{
    private const string NativeLib = "DevolutionsIronRdp";

    /// <summary>
    /// Creates a new RDCleanPath request PDU
    /// </summary>
    /// <remarks>
    /// # Arguments
    /// * `x224_pdu` - The X.224 Connection Request PDU bytes
    /// * `destination` - The destination RDP server address (e.g., "10.10.0.3:3389")
    /// * `proxy_auth` - The JWT authentication token
    /// * `pcb` - Optional preconnection blob (for Hyper-V VM connections, empty string if not needed)
    /// </remarks>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathPdu_new_request", ExactSpelling = true)]
    public static unsafe extern RdcleanpathFfiResultBoxRDCleanPathPduBoxIronRdpError NewRequest(byte* x224Pdu, nuint x224PduSz, byte* destination, nuint destinationSz, byte* proxyAuth, nuint proxyAuthSz, byte* pcb, nuint pcbSz);

    /// <summary>
    /// Decodes a RDCleanPath PDU from DER-encoded bytes
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathPdu_from_der", ExactSpelling = true)]
    public static unsafe extern RdcleanpathFfiResultBoxRDCleanPathPduBoxIronRdpError FromDer(byte* bytes, nuint bytesSz);

    /// <summary>
    /// Encodes the RDCleanPath PDU to DER-encoded bytes
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathPdu_to_der", ExactSpelling = true)]
    public static unsafe extern RdcleanpathFfiResultBoxVecU8BoxIronRdpError ToDer(RDCleanPathPdu* self);

    /// <summary>
    /// Detects if the bytes contain a valid RDCleanPath PDU and returns detection result
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathPdu_detect", ExactSpelling = true)]
    public static unsafe extern RDCleanPathDetectionResult* Detect(byte* bytes, nuint bytesSz);

    /// <summary>
    /// Gets the type of this RDCleanPath PDU
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathPdu_get_type", ExactSpelling = true)]
    public static unsafe extern RdcleanpathFfiResultRDCleanPathResultTypeBoxIronRdpError GetType(RDCleanPathPdu* self);

    /// <summary>
    /// Gets the X.224 connection response bytes (for Response or NegotiationError variants)
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathPdu_get_x224_response", ExactSpelling = true)]
    public static unsafe extern RdcleanpathFfiResultBoxVecU8BoxIronRdpError GetX224Response(RDCleanPathPdu* self);

    /// <summary>
    /// Gets the server certificate chain (for Response variant)
    /// Returns a vector iterator of certificate bytes
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathPdu_get_server_cert_chain", ExactSpelling = true)]
    public static unsafe extern RdcleanpathFfiResultBoxCertificateChainIteratorBoxIronRdpError GetServerCertChain(RDCleanPathPdu* self);

    /// <summary>
    /// Gets the server address string (for Response variant)
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathPdu_get_server_addr", ExactSpelling = true)]
    public static unsafe extern void GetServerAddr(RDCleanPathPdu* self, DiplomatWriteable* writeable);

    /// <summary>
    /// Gets error message (for GeneralError variant)
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathPdu_get_error_message", ExactSpelling = true)]
    public static unsafe extern void GetErrorMessage(RDCleanPathPdu* self, DiplomatWriteable* writeable);

    /// <summary>
    /// Gets the error code (for GeneralError variant)
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathPdu_get_error_code", ExactSpelling = true)]
    public static unsafe extern RdcleanpathFfiResultU16BoxIronRdpError GetErrorCode(RDCleanPathPdu* self);

    /// <summary>
    /// Gets the HTTP status code if present (for GeneralError variant)
    /// Returns error if not present or not a GeneralError variant
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathPdu_get_http_status_code", ExactSpelling = true)]
    public static unsafe extern RdcleanpathFfiResultU16BoxIronRdpError GetHttpStatusCode(RDCleanPathPdu* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathPdu_destroy", ExactSpelling = true)]
    public static unsafe extern void Destroy(RDCleanPathPdu* self);
}
