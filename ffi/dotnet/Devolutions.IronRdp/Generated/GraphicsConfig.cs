// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp;

#nullable enable

public partial class GraphicsConfig: IDisposable
{
    private unsafe Raw.GraphicsConfig* _inner;

    public bool Avc444
    {
        get
        {
            return GetAvc444();
        }
    }

    public uint Capabilities
    {
        get
        {
            return GetCapabilities();
        }
    }

    public bool H264
    {
        get
        {
            return GetH264();
        }
    }

    public bool SmallCache
    {
        get
        {
            return GetSmallCache();
        }
    }

    public bool ThinClient
    {
        get
        {
            return GetThinClient();
        }
    }

    /// <summary>
    /// Creates a managed <c>GraphicsConfig</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe GraphicsConfig(Raw.GraphicsConfig* handle)
    {
        _inner = handle;
    }

    public bool GetAvc444()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("GraphicsConfig");
            }
            bool retVal = Raw.GraphicsConfig.GetAvc444(_inner);
            return retVal;
        }
    }

    public bool GetH264()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("GraphicsConfig");
            }
            bool retVal = Raw.GraphicsConfig.GetH264(_inner);
            return retVal;
        }
    }

    public bool GetThinClient()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("GraphicsConfig");
            }
            bool retVal = Raw.GraphicsConfig.GetThinClient(_inner);
            return retVal;
        }
    }

    public bool GetSmallCache()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("GraphicsConfig");
            }
            bool retVal = Raw.GraphicsConfig.GetSmallCache(_inner);
            return retVal;
        }
    }

    public uint GetCapabilities()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("GraphicsConfig");
            }
            uint retVal = Raw.GraphicsConfig.GetCapabilities(_inner);
            return retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.GraphicsConfig* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.GraphicsConfig.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~GraphicsConfig()
    {
        Dispose();
    }
}
