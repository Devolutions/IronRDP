// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp;

#nullable enable

public partial class TupleU32s: IDisposable
{
    private unsafe Raw.TupleU32s* _inner;

    public uint First
    {
        get
        {
            return GetFirst();
        }
    }

    public uint Second
    {
        get
        {
            return GetSecond();
        }
    }

    /// <summary>
    /// Creates a managed <c>TupleU32s</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe TupleU32s(Raw.TupleU32s* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>TupleU32s</c> allocated on Rust side.
    /// </returns>
    public static TupleU32s New(uint first, uint second)
    {
        unsafe
        {
            Raw.TupleU32s* retVal = Raw.TupleU32s.New(first, second);
            return new TupleU32s(retVal);
        }
    }

    public uint GetFirst()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("TupleU32s");
            }
            uint retVal = Raw.TupleU32s.GetFirst(_inner);
            return retVal;
        }
    }

    public uint GetSecond()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("TupleU32s");
            }
            uint retVal = Raw.TupleU32s.GetSecond(_inner);
            return retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.TupleU32s* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.TupleU32s.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~TupleU32s()
    {
        Dispose();
    }
}
