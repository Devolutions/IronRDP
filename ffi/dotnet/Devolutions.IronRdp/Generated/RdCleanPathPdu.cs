// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp;

#nullable enable

public partial class RdCleanPathPdu: IDisposable
{
    private unsafe Raw.RdCleanPathPdu* _inner;

    /// <summary>
    /// Creates a managed <c>RdCleanPathPdu</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe RdCleanPathPdu(Raw.RdCleanPathPdu* handle)
    {
        _inner = handle;
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>RdCleanPathPdu</c> allocated on Rust side.
    /// </returns>
    public static RdCleanPathPdu NewRequest(VecU8 x224Pdu, string destination, string proxyAuth, OptionalString pcb)
    {
        unsafe
        {
            byte[] destinationBuf = DiplomatUtils.StringToUtf8(destination);
            byte[] proxyAuthBuf = DiplomatUtils.StringToUtf8(proxyAuth);
            nuint destinationBufLength = (nuint)destinationBuf.Length;
            nuint proxyAuthBufLength = (nuint)proxyAuthBuf.Length;
            Raw.VecU8* x224PduRaw;
            x224PduRaw = x224Pdu.AsFFI();
            if (x224PduRaw == null)
            {
                throw new ObjectDisposedException("VecU8");
            }
            Raw.OptionalString* pcbRaw;
            pcbRaw = pcb.AsFFI();
            if (pcbRaw == null)
            {
                throw new ObjectDisposedException("OptionalString");
            }
            fixed (byte* destinationBufPtr = destinationBuf)
            {
                fixed (byte* proxyAuthBufPtr = proxyAuthBuf)
                {
                    Raw.RdcleanpathFfiResultBoxRdCleanPathPduBoxIronRdpError result = Raw.RdCleanPathPdu.NewRequest(x224PduRaw, destinationBufPtr, destinationBufLength, proxyAuthBufPtr, proxyAuthBufLength, pcbRaw);
                    if (!result.isOk)
                    {
                        throw new IronRdpException(new IronRdpError(result.Err));
                    }
                    Raw.RdCleanPathPdu* retVal = result.Ok;
                    return new RdCleanPathPdu(retVal);
                }
            }
        }
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>VecU8</c> allocated on Rust side.
    /// </returns>
    public VecU8 ToDer()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathPdu");
            }
            Raw.RdcleanpathFfiResultBoxVecU8BoxIronRdpError result = Raw.RdCleanPathPdu.ToDer(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.VecU8* retVal = result.Ok;
            return new VecU8(retVal);
        }
    }

    /// <returns>
    /// A <c>PduHint</c> allocated on Rust side.
    /// </returns>
    public static PduHint GetHint()
    {
        unsafe
        {
            Raw.PduHint* retVal = Raw.RdCleanPathPdu.GetHint();
            return new PduHint(retVal);
        }
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>RdCleanPathPdu</c> allocated on Rust side.
    /// </returns>
    public static RdCleanPathPdu FromDer(byte[] der)
    {
        unsafe
        {
            nuint derLength = (nuint)der.Length;
            fixed (byte* derPtr = der)
            {
                Raw.RdcleanpathFfiResultBoxRdCleanPathPduBoxIronRdpError result = Raw.RdCleanPathPdu.FromDer(derPtr, derLength);
                if (!result.isOk)
                {
                    throw new IronRdpException(new IronRdpError(result.Err));
                }
                Raw.RdCleanPathPdu* retVal = result.Ok;
                return new RdCleanPathPdu(retVal);
            }
        }
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>RdCleanPath</c> allocated on Rust side.
    /// </returns>
    public RdCleanPath IntoEnum()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathPdu");
            }
            Raw.RdcleanpathFfiResultBoxRdCleanPathBoxIronRdpError result = Raw.RdCleanPathPdu.IntoEnum(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.RdCleanPath* retVal = result.Ok;
            return new RdCleanPath(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.RdCleanPathPdu* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.RdCleanPathPdu.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~RdCleanPathPdu()
    {
        Dispose();
    }
}
