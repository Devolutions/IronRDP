// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp;

#nullable enable

public partial class RdCleanPathPdu: IDisposable
{
    private unsafe Raw.RdCleanPathPdu* _inner;

    public string ServerAddr
    {
        get
        {
            return GetServerAddr();
        }
    }

    public ServerCertChain ServerCertChain
    {
        get
        {
            return GetServerCertChain();
        }
    }

    public VecU8 X224ConnectionPdu
    {
        get
        {
            return GetX224ConnectionPdu();
        }
    }

    /// <summary>
    /// Creates a managed <c>RdCleanPathPdu</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe RdCleanPathPdu(Raw.RdCleanPathPdu* handle)
    {
        _inner = handle;
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>VecU8</c> allocated on Rust side.
    /// </returns>
    public VecU8 ToDer()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathPdu");
            }
            Raw.RdcleanpathFfiResultBoxVecU8BoxIronRdpError result = Raw.RdCleanPathPdu.ToDer(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.VecU8* retVal = result.Ok;
            return new VecU8(retVal);
        }
    }

    /// <returns>
    /// A <c>PduHint</c> allocated on Rust side.
    /// </returns>
    public static PduHint GetHint()
    {
        unsafe
        {
            Raw.PduHint* retVal = Raw.RdCleanPathPdu.GetHint();
            return new PduHint(retVal);
        }
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>RdCleanPathPdu</c> allocated on Rust side.
    /// </returns>
    public static RdCleanPathPdu FromDer(byte[] der)
    {
        unsafe
        {
            nuint derLength = (nuint)der.Length;
            fixed (byte* derPtr = der)
            {
                Raw.RdcleanpathFfiResultBoxRdCleanPathPduBoxIronRdpError result = Raw.RdCleanPathPdu.FromDer(derPtr, derLength);
                if (!result.isOk)
                {
                    throw new IronRdpException(new IronRdpError(result.Err));
                }
                Raw.RdCleanPathPdu* retVal = result.Ok;
                return new RdCleanPathPdu(retVal);
            }
        }
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>VecU8</c> allocated on Rust side.
    /// </returns>
    public VecU8 GetX224ConnectionPdu()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathPdu");
            }
            Raw.RdcleanpathFfiResultBoxVecU8BoxIronRdpError result = Raw.RdCleanPathPdu.GetX224ConnectionPdu(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.VecU8* retVal = result.Ok;
            return new VecU8(retVal);
        }
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>ServerCertChain</c> allocated on Rust side.
    /// </returns>
    public ServerCertChain GetServerCertChain()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathPdu");
            }
            Raw.RdcleanpathFfiResultBoxServerCertChainBoxIronRdpError result = Raw.RdCleanPathPdu.GetServerCertChain(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.ServerCertChain* retVal = result.Ok;
            return new ServerCertChain(retVal);
        }
    }

    /// <exception cref="IronRdpException"></exception>
    public void GetServerAddr(DiplomatWriteable serverAddr)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathPdu");
            }
            Raw.RdcleanpathFfiResultVoidBoxIronRdpError result = Raw.RdCleanPathPdu.GetServerAddr(_inner, &serverAddr);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
        }
    }

    /// <exception cref="IronRdpException"></exception>
    public string GetServerAddr()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathPdu");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.RdcleanpathFfiResultVoidBoxIronRdpError result = Raw.RdCleanPathPdu.GetServerAddr(_inner, &writeable);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.RdCleanPathPdu* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.RdCleanPathPdu.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~RdCleanPathPdu()
    {
        Dispose();
    }
}
