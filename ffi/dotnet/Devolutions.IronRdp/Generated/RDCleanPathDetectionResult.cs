// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp;

#nullable enable

public partial class RDCleanPathDetectionResult: IDisposable
{
    private unsafe Raw.RDCleanPathDetectionResult* _inner;

    public nuint TotalLength
    {
        get
        {
            return GetTotalLength();
        }
    }

    /// <summary>
    /// Creates a managed <c>RDCleanPathDetectionResult</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe RDCleanPathDetectionResult(Raw.RDCleanPathDetectionResult* handle)
    {
        _inner = handle;
    }

    public bool IsDetected()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathDetectionResult");
            }
            bool retVal = Raw.RDCleanPathDetectionResult.IsDetected(_inner);
            return retVal;
        }
    }

    public bool IsNotEnoughBytes()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathDetectionResult");
            }
            bool retVal = Raw.RDCleanPathDetectionResult.IsNotEnoughBytes(_inner);
            return retVal;
        }
    }

    public bool IsFailed()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathDetectionResult");
            }
            bool retVal = Raw.RDCleanPathDetectionResult.IsFailed(_inner);
            return retVal;
        }
    }

    /// <exception cref="IronRdpException"></exception>
    public nuint GetTotalLength()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathDetectionResult");
            }
            Raw.RdcleanpathFfiResultUsizeBoxIronRdpError result = Raw.RDCleanPathDetectionResult.GetTotalLength(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            nuint retVal = result.Ok;
            return retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.RDCleanPathDetectionResult* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.RDCleanPathDetectionResult.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~RDCleanPathDetectionResult()
    {
        Dispose();
    }
}
