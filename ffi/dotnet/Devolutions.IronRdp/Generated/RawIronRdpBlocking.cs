// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp.Raw;

#nullable enable

[StructLayout(LayoutKind.Sequential)]
public partial struct IronRdpBlocking
{
    private const string NativeLib = "DevolutionsIronRdp";

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IronRdpBlocking_new", ExactSpelling = true)]
    public static unsafe extern IronRdpBlocking* New();

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IronRdpBlocking_connect_begin", ExactSpelling = true)]
    public static unsafe extern IronrdpBlockingFfiResultBoxShouldUpgradeBoxIronRdpError ConnectBegin(BlockingTcpFrame* framed, ClientConnector* connector);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IronRdpBlocking_mark_as_upgraded", ExactSpelling = true)]
    public static unsafe extern IronrdpBlockingFfiResultBoxUpgradedBoxIronRdpError MarkAsUpgraded(ShouldUpgrade* shouldUpgrade, ClientConnector* connector);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IronRdpBlocking_skip_connect_begin", ExactSpelling = true)]
    public static unsafe extern IronrdpBlockingFfiResultBoxShouldUpgradeBoxIronRdpError SkipConnectBegin(ClientConnector* connector);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IronRdpBlocking_connect_finalize", ExactSpelling = true)]
    public static unsafe extern IronrdpBlockingFfiResultBoxConnectionResultBoxIronRdpError ConnectFinalize(Upgraded* upgraded, BlockingUpgradedFrame* upgradedFramed, ClientConnector* connector, ServerName* serverName, VecU8* serverPublicKey, KerberosConfig* kerberosConfig);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "IronRdpBlocking_destroy", ExactSpelling = true)]
    public static unsafe extern void Destroy(IronRdpBlocking* self);
}
