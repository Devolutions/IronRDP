// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp;

#nullable enable

public partial class RDCleanPathPdu: IDisposable
{
    private unsafe Raw.RDCleanPathPdu* _inner;

    public ushort ErrorCode
    {
        get
        {
            return GetErrorCode();
        }
    }

    public string ErrorMessage
    {
        get
        {
            return GetErrorMessage();
        }
    }

    public ushort HttpStatusCode
    {
        get
        {
            return GetHttpStatusCode();
        }
    }

    public string ServerAddr
    {
        get
        {
            return GetServerAddr();
        }
    }

    public CertificateChainIterator ServerCertChain
    {
        get
        {
            return GetServerCertChain();
        }
    }

    public RDCleanPathResultType Type
    {
        get
        {
            return GetType();
        }
    }

    public VecU8 X224Response
    {
        get
        {
            return GetX224Response();
        }
    }

    /// <summary>
    /// Creates a managed <c>RDCleanPathPdu</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe RDCleanPathPdu(Raw.RDCleanPathPdu* handle)
    {
        _inner = handle;
    }

    /// <summary>
    /// Creates a new RDCleanPath request PDU
    /// </summary>
    /// <remarks>
    /// # Arguments
    /// * `x224_pdu` - The X.224 Connection Request PDU bytes
    /// * `destination` - The destination RDP server address (e.g., "10.10.0.3:3389")
    /// * `proxy_auth` - The JWT authentication token
    /// * `pcb` - Optional preconnection blob (for Hyper-V VM connections, empty string if not needed)
    /// </remarks>
    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>RDCleanPathPdu</c> allocated on Rust side.
    /// </returns>
    public static RDCleanPathPdu NewRequest(byte[] x224Pdu, string destination, string proxyAuth, string pcb)
    {
        unsafe
        {
            byte[] destinationBuf = DiplomatUtils.StringToUtf8(destination);
            byte[] proxyAuthBuf = DiplomatUtils.StringToUtf8(proxyAuth);
            byte[] pcbBuf = DiplomatUtils.StringToUtf8(pcb);
            nuint x224PduLength = (nuint)x224Pdu.Length;
            nuint destinationBufLength = (nuint)destinationBuf.Length;
            nuint proxyAuthBufLength = (nuint)proxyAuthBuf.Length;
            nuint pcbBufLength = (nuint)pcbBuf.Length;
            fixed (byte* x224PduPtr = x224Pdu)
            {
                fixed (byte* destinationBufPtr = destinationBuf)
                {
                    fixed (byte* proxyAuthBufPtr = proxyAuthBuf)
                    {
                        fixed (byte* pcbBufPtr = pcbBuf)
                        {
                            Raw.RdcleanpathFfiResultBoxRDCleanPathPduBoxIronRdpError result = Raw.RDCleanPathPdu.NewRequest(x224PduPtr, x224PduLength, destinationBufPtr, destinationBufLength, proxyAuthBufPtr, proxyAuthBufLength, pcbBufPtr, pcbBufLength);
                            if (!result.isOk)
                            {
                                throw new IronRdpException(new IronRdpError(result.Err));
                            }
                            Raw.RDCleanPathPdu* retVal = result.Ok;
                            return new RDCleanPathPdu(retVal);
                        }
                    }
                }
            }
        }
    }

    /// <summary>
    /// Decodes a RDCleanPath PDU from DER-encoded bytes
    /// </summary>
    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>RDCleanPathPdu</c> allocated on Rust side.
    /// </returns>
    public static RDCleanPathPdu FromDer(byte[] bytes)
    {
        unsafe
        {
            nuint bytesLength = (nuint)bytes.Length;
            fixed (byte* bytesPtr = bytes)
            {
                Raw.RdcleanpathFfiResultBoxRDCleanPathPduBoxIronRdpError result = Raw.RDCleanPathPdu.FromDer(bytesPtr, bytesLength);
                if (!result.isOk)
                {
                    throw new IronRdpException(new IronRdpError(result.Err));
                }
                Raw.RDCleanPathPdu* retVal = result.Ok;
                return new RDCleanPathPdu(retVal);
            }
        }
    }

    /// <summary>
    /// Encodes the RDCleanPath PDU to DER-encoded bytes
    /// </summary>
    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>VecU8</c> allocated on Rust side.
    /// </returns>
    public VecU8 ToDer()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathPdu");
            }
            Raw.RdcleanpathFfiResultBoxVecU8BoxIronRdpError result = Raw.RDCleanPathPdu.ToDer(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.VecU8* retVal = result.Ok;
            return new VecU8(retVal);
        }
    }

    /// <summary>
    /// Detects if the bytes contain a valid RDCleanPath PDU and returns detection result
    /// </summary>
    /// <returns>
    /// A <c>RDCleanPathDetectionResult</c> allocated on Rust side.
    /// </returns>
    public static RDCleanPathDetectionResult Detect(byte[] bytes)
    {
        unsafe
        {
            nuint bytesLength = (nuint)bytes.Length;
            fixed (byte* bytesPtr = bytes)
            {
                Raw.RDCleanPathDetectionResult* retVal = Raw.RDCleanPathPdu.Detect(bytesPtr, bytesLength);
                return new RDCleanPathDetectionResult(retVal);
            }
        }
    }

    /// <summary>
    /// Gets the type of this RDCleanPath PDU
    /// </summary>
    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>RDCleanPathResultType</c> allocated on C# side.
    /// </returns>
    public RDCleanPathResultType GetType()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathPdu");
            }
            Raw.RdcleanpathFfiResultRDCleanPathResultTypeBoxIronRdpError result = Raw.RDCleanPathPdu.GetType(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.RDCleanPathResultType retVal = result.Ok;
            return (RDCleanPathResultType)retVal;
        }
    }

    /// <summary>
    /// Gets the X.224 connection response bytes (for Response or NegotiationError variants)
    /// </summary>
    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>VecU8</c> allocated on Rust side.
    /// </returns>
    public VecU8 GetX224Response()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathPdu");
            }
            Raw.RdcleanpathFfiResultBoxVecU8BoxIronRdpError result = Raw.RDCleanPathPdu.GetX224Response(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.VecU8* retVal = result.Ok;
            return new VecU8(retVal);
        }
    }

    /// <summary>
    /// Gets the server certificate chain (for Response variant)
    /// Returns a vector iterator of certificate bytes
    /// </summary>
    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>CertificateChainIterator</c> allocated on Rust side.
    /// </returns>
    public CertificateChainIterator GetServerCertChain()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathPdu");
            }
            Raw.RdcleanpathFfiResultBoxCertificateChainIteratorBoxIronRdpError result = Raw.RDCleanPathPdu.GetServerCertChain(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.CertificateChainIterator* retVal = result.Ok;
            return new CertificateChainIterator(retVal);
        }
    }

    /// <summary>
    /// Gets the server address string (for Response variant)
    /// </summary>
    public void GetServerAddr(DiplomatWriteable writeable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathPdu");
            }
            Raw.RDCleanPathPdu.GetServerAddr(_inner, &writeable);
        }
    }

    /// <summary>
    /// Gets the server address string (for Response variant)
    /// </summary>
    public string GetServerAddr()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathPdu");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.RDCleanPathPdu.GetServerAddr(_inner, &writeable);
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <summary>
    /// Gets error message (for GeneralError variant)
    /// </summary>
    public void GetErrorMessage(DiplomatWriteable writeable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathPdu");
            }
            Raw.RDCleanPathPdu.GetErrorMessage(_inner, &writeable);
        }
    }

    /// <summary>
    /// Gets error message (for GeneralError variant)
    /// </summary>
    public string GetErrorMessage()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathPdu");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.RDCleanPathPdu.GetErrorMessage(_inner, &writeable);
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <summary>
    /// Gets the error code (for GeneralError variant)
    /// </summary>
    /// <exception cref="IronRdpException"></exception>
    public ushort GetErrorCode()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathPdu");
            }
            Raw.RdcleanpathFfiResultU16BoxIronRdpError result = Raw.RDCleanPathPdu.GetErrorCode(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            ushort retVal = result.Ok;
            return retVal;
        }
    }

    /// <summary>
    /// Gets the HTTP status code if present (for GeneralError variant)
    /// Returns error if not present or not a GeneralError variant
    /// </summary>
    /// <exception cref="IronRdpException"></exception>
    public ushort GetHttpStatusCode()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathPdu");
            }
            Raw.RdcleanpathFfiResultU16BoxIronRdpError result = Raw.RDCleanPathPdu.GetHttpStatusCode(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            ushort retVal = result.Ok;
            return retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.RDCleanPathPdu* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.RDCleanPathPdu.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~RDCleanPathPdu()
    {
        Dispose();
    }
}
