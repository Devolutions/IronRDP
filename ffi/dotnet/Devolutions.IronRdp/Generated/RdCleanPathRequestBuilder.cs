// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp;

#nullable enable

public partial class RdCleanPathRequestBuilder: IDisposable
{
    private unsafe Raw.RdCleanPathRequestBuilder* _inner;

    /// <summary>
    /// Creates a managed <c>RdCleanPathRequestBuilder</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe RdCleanPathRequestBuilder(Raw.RdCleanPathRequestBuilder* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>RdCleanPathRequestBuilder</c> allocated on Rust side.
    /// </returns>
    public static RdCleanPathRequestBuilder New()
    {
        unsafe
        {
            Raw.RdCleanPathRequestBuilder* retVal = Raw.RdCleanPathRequestBuilder.New();
            return new RdCleanPathRequestBuilder(retVal);
        }
    }

    public void WithX224Pdu(VecU8 x224Pdu)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathRequestBuilder");
            }
            Raw.VecU8* x224PduRaw;
            x224PduRaw = x224Pdu.AsFFI();
            if (x224PduRaw == null)
            {
                throw new ObjectDisposedException("VecU8");
            }
            Raw.RdCleanPathRequestBuilder.WithX224Pdu(_inner, x224PduRaw);
        }
    }

    public void WithDestination(string destination)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathRequestBuilder");
            }
            byte[] destinationBuf = DiplomatUtils.StringToUtf8(destination);
            nuint destinationBufLength = (nuint)destinationBuf.Length;
            fixed (byte* destinationBufPtr = destinationBuf)
            {
                Raw.RdCleanPathRequestBuilder.WithDestination(_inner, destinationBufPtr, destinationBufLength);
            }
        }
    }

    public void WithProxyAuth(string proxyAuth)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathRequestBuilder");
            }
            byte[] proxyAuthBuf = DiplomatUtils.StringToUtf8(proxyAuth);
            nuint proxyAuthBufLength = (nuint)proxyAuthBuf.Length;
            fixed (byte* proxyAuthBufPtr = proxyAuthBuf)
            {
                Raw.RdCleanPathRequestBuilder.WithProxyAuth(_inner, proxyAuthBufPtr, proxyAuthBufLength);
            }
        }
    }

    public void WithPcb(string pcb)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathRequestBuilder");
            }
            byte[] pcbBuf = DiplomatUtils.StringToUtf8(pcb);
            nuint pcbBufLength = (nuint)pcbBuf.Length;
            fixed (byte* pcbBufPtr = pcbBuf)
            {
                Raw.RdCleanPathRequestBuilder.WithPcb(_inner, pcbBufPtr, pcbBufLength);
            }
        }
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>RdCleanPathPdu</c> allocated on Rust side.
    /// </returns>
    public RdCleanPathPdu Build()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathRequestBuilder");
            }
            Raw.RdcleanpathFfiResultBoxRdCleanPathPduBoxIronRdpError result = Raw.RdCleanPathRequestBuilder.Build(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.RdCleanPathPdu* retVal = result.Ok;
            return new RdCleanPathPdu(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.RdCleanPathRequestBuilder* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.RdCleanPathRequestBuilder.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~RdCleanPathRequestBuilder()
    {
        Dispose();
    }
}
