// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp;

#nullable enable

public partial class RDCleanPathResult: IDisposable
{
    private unsafe Raw.RDCleanPathResult* _inner;

    public ushort ErrorCode
    {
        get
        {
            return GetErrorCode();
        }
    }

    public string ErrorMessage
    {
        get
        {
            return GetErrorMessage();
        }
    }

    public ushort HttpStatusCode
    {
        get
        {
            return GetHttpStatusCode();
        }
    }

    public string ServerAddr
    {
        get
        {
            return GetServerAddr();
        }
    }

    public CertificateChainIterator ServerCertChain
    {
        get
        {
            return GetServerCertChain();
        }
    }

    public RDCleanPathResultType Type
    {
        get
        {
            return GetType();
        }
    }

    public VecU8 X224Response
    {
        get
        {
            return GetX224Response();
        }
    }

    /// <summary>
    /// Creates a managed <c>RDCleanPathResult</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe RDCleanPathResult(Raw.RDCleanPathResult* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>RDCleanPathResultType</c> allocated on C# side.
    /// </returns>
    public RDCleanPathResultType GetType()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathResult");
            }
            Raw.RDCleanPathResultType retVal = Raw.RDCleanPathResult.GetType(_inner);
            return (RDCleanPathResultType)retVal;
        }
    }

    /// <summary>
    /// Gets the X.224 connection response bytes (for Response variant)
    /// </summary>
    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>VecU8</c> allocated on Rust side.
    /// </returns>
    public VecU8 GetX224Response()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathResult");
            }
            Raw.RdcleanpathFfiResultBoxVecU8BoxIronRdpError result = Raw.RDCleanPathResult.GetX224Response(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.VecU8* retVal = result.Ok;
            return new VecU8(retVal);
        }
    }

    /// <summary>
    /// Gets the server certificate chain (for Response variant)
    /// Returns a vector iterator of certificate bytes
    /// </summary>
    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>CertificateChainIterator</c> allocated on Rust side.
    /// </returns>
    public CertificateChainIterator GetServerCertChain()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathResult");
            }
            Raw.RdcleanpathFfiResultBoxCertificateChainIteratorBoxIronRdpError result = Raw.RDCleanPathResult.GetServerCertChain(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.CertificateChainIterator* retVal = result.Ok;
            return new CertificateChainIterator(retVal);
        }
    }

    /// <summary>
    /// Gets the server address string (for Response variant)
    /// </summary>
    public void GetServerAddr(DiplomatWriteable writeable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathResult");
            }
            Raw.RDCleanPathResult.GetServerAddr(_inner, &writeable);
        }
    }

    /// <summary>
    /// Gets the server address string (for Response variant)
    /// </summary>
    public string GetServerAddr()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathResult");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.RDCleanPathResult.GetServerAddr(_inner, &writeable);
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <summary>
    /// Gets error message (for GeneralError variant)
    /// </summary>
    public void GetErrorMessage(DiplomatWriteable writeable)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathResult");
            }
            Raw.RDCleanPathResult.GetErrorMessage(_inner, &writeable);
        }
    }

    /// <summary>
    /// Gets error message (for GeneralError variant)
    /// </summary>
    public string GetErrorMessage()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathResult");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.RDCleanPathResult.GetErrorMessage(_inner, &writeable);
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <summary>
    /// Gets the error code (for GeneralError variant)
    /// </summary>
    /// <exception cref="IronRdpException"></exception>
    public ushort GetErrorCode()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathResult");
            }
            Raw.RdcleanpathFfiResultU16BoxIronRdpError result = Raw.RDCleanPathResult.GetErrorCode(_inner);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            ushort retVal = result.Ok;
            return retVal;
        }
    }

    /// <summary>
    /// Gets the HTTP status code if present (for GeneralError variant)
    /// Returns 0 if not present or not a GeneralError variant
    /// </summary>
    public ushort GetHttpStatusCode()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathResult");
            }
            ushort retVal = Raw.RDCleanPathResult.GetHttpStatusCode(_inner);
            return retVal;
        }
    }

    /// <summary>
    /// Checks if HTTP status code is present
    /// </summary>
    public bool HasHttpStatusCode()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RDCleanPathResult");
            }
            bool retVal = Raw.RDCleanPathResult.HasHttpStatusCode(_inner);
            return retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.RDCleanPathResult* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.RDCleanPathResult.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~RDCleanPathResult()
    {
        Dispose();
    }
}
