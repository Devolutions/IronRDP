// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp;

#nullable enable

public partial class RdCleanPathResponse: IDisposable
{
    private unsafe Raw.RdCleanPathResponse* _inner;

    public string ServerAddr
    {
        get
        {
            return GetServerAddr();
        }
    }

    public VecVecU8 ServerCertChain
    {
        get
        {
            return GetServerCertChain();
        }
    }

    public VecU8 X224ConnectionResponse
    {
        get
        {
            return GetX224ConnectionResponse();
        }
    }

    /// <summary>
    /// Creates a managed <c>RdCleanPathResponse</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe RdCleanPathResponse(Raw.RdCleanPathResponse* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>VecU8</c> allocated on Rust side.
    /// </returns>
    public VecU8 GetX224ConnectionResponse()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathResponse");
            }
            Raw.VecU8* retVal = Raw.RdCleanPathResponse.GetX224ConnectionResponse(_inner);
            return new VecU8(retVal);
        }
    }

    /// <returns>
    /// A <c>VecVecU8</c> allocated on Rust side.
    /// </returns>
    public VecVecU8 GetServerCertChain()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathResponse");
            }
            Raw.VecVecU8* retVal = Raw.RdCleanPathResponse.GetServerCertChain(_inner);
            return new VecVecU8(retVal);
        }
    }

    /// <exception cref="IronRdpException"></exception>
    public void GetServerAddr(DiplomatWriteable serverAddr)
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathResponse");
            }
            Raw.RdcleanpathFfiResultVoidBoxIronRdpError result = Raw.RdCleanPathResponse.GetServerAddr(_inner, &serverAddr);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
        }
    }

    /// <exception cref="IronRdpException"></exception>
    public string GetServerAddr()
    {
        unsafe
        {
            if (_inner == null)
            {
                throw new ObjectDisposedException("RdCleanPathResponse");
            }
            DiplomatWriteable writeable = new DiplomatWriteable();
            Raw.RdcleanpathFfiResultVoidBoxIronRdpError result = Raw.RdCleanPathResponse.GetServerAddr(_inner, &writeable);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            string retVal = writeable.ToUnicode();
            writeable.Dispose();
            return retVal;
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.RdCleanPathResponse* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.RdCleanPathResponse.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~RdCleanPathResponse()
    {
        Dispose();
    }
}
