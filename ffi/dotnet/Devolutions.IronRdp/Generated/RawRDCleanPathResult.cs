// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp.Raw;

#nullable enable

[StructLayout(LayoutKind.Sequential)]
public partial struct RDCleanPathResult
{
    private const string NativeLib = "DevolutionsIronRdp";

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathResult_get_type", ExactSpelling = true)]
    public static unsafe extern RDCleanPathResultType GetType(RDCleanPathResult* self);

    /// <summary>
    /// Gets the X.224 connection response bytes (for Response variant)
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathResult_get_x224_response", ExactSpelling = true)]
    public static unsafe extern RdcleanpathFfiResultBoxVecU8BoxIronRdpError GetX224Response(RDCleanPathResult* self);

    /// <summary>
    /// Gets the server certificate chain (for Response variant)
    /// Returns a vector iterator of certificate bytes
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathResult_get_server_cert_chain", ExactSpelling = true)]
    public static unsafe extern RdcleanpathFfiResultBoxCertificateChainIteratorBoxIronRdpError GetServerCertChain(RDCleanPathResult* self);

    /// <summary>
    /// Gets the server address string (for Response variant)
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathResult_get_server_addr", ExactSpelling = true)]
    public static unsafe extern void GetServerAddr(RDCleanPathResult* self, DiplomatWriteable* writeable);

    /// <summary>
    /// Gets error message (for GeneralError variant)
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathResult_get_error_message", ExactSpelling = true)]
    public static unsafe extern void GetErrorMessage(RDCleanPathResult* self, DiplomatWriteable* writeable);

    /// <summary>
    /// Gets the error code (for GeneralError variant)
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathResult_get_error_code", ExactSpelling = true)]
    public static unsafe extern RdcleanpathFfiResultU16BoxIronRdpError GetErrorCode(RDCleanPathResult* self);

    /// <summary>
    /// Gets the HTTP status code if present (for GeneralError variant)
    /// Returns 0 if not present or not a GeneralError variant
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathResult_get_http_status_code", ExactSpelling = true)]
    public static unsafe extern ushort GetHttpStatusCode(RDCleanPathResult* self);

    /// <summary>
    /// Checks if HTTP status code is present
    /// </summary>
    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathResult_has_http_status_code", ExactSpelling = true)]
    [return: MarshalAs(UnmanagedType.U1)]
    public static unsafe extern bool HasHttpStatusCode(RDCleanPathResult* self);

    [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "RDCleanPathResult_destroy", ExactSpelling = true)]
    public static unsafe extern void Destroy(RDCleanPathResult* self);
}
