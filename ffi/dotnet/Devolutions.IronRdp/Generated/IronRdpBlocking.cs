// <auto-generated/> by Diplomat

#pragma warning disable 0105
using System;
using System.Runtime.InteropServices;

using Devolutions.IronRdp.Diplomat;
#pragma warning restore 0105

namespace Devolutions.IronRdp;

#nullable enable

public partial class IronRdpBlocking: IDisposable
{
    private unsafe Raw.IronRdpBlocking* _inner;

    /// <summary>
    /// Creates a managed <c>IronRdpBlocking</c> from a raw handle.
    /// </summary>
    /// <remarks>
    /// Safety: you should not build two managed objects using the same raw handle (may causes use-after-free and double-free).
    /// <br/>
    /// This constructor assumes the raw struct is allocated on Rust side.
    /// If implemented, the custom Drop implementation on Rust side WILL run on destruction.
    /// </remarks>
    public unsafe IronRdpBlocking(Raw.IronRdpBlocking* handle)
    {
        _inner = handle;
    }

    /// <returns>
    /// A <c>IronRdpBlocking</c> allocated on Rust side.
    /// </returns>
    public static IronRdpBlocking New()
    {
        unsafe
        {
            Raw.IronRdpBlocking* retVal = Raw.IronRdpBlocking.New();
            return new IronRdpBlocking(retVal);
        }
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>ShouldUpgrade</c> allocated on Rust side.
    /// </returns>
    public static ShouldUpgrade ConnectBegin(BlockingTcpFrame framed, ClientConnector connector)
    {
        unsafe
        {
            Raw.BlockingTcpFrame* framedRaw;
            framedRaw = framed.AsFFI();
            if (framedRaw == null)
            {
                throw new ObjectDisposedException("BlockingTcpFrame");
            }
            Raw.ClientConnector* connectorRaw;
            connectorRaw = connector.AsFFI();
            if (connectorRaw == null)
            {
                throw new ObjectDisposedException("ClientConnector");
            }
            Raw.IronrdpBlockingFfiResultBoxShouldUpgradeBoxIronRdpError result = Raw.IronRdpBlocking.ConnectBegin(framedRaw, connectorRaw);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.ShouldUpgrade* retVal = result.Ok;
            return new ShouldUpgrade(retVal);
        }
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>Upgraded</c> allocated on Rust side.
    /// </returns>
    public static Upgraded MarkAsUpgraded(ShouldUpgrade shouldUpgrade, ClientConnector connector)
    {
        unsafe
        {
            Raw.ShouldUpgrade* shouldUpgradeRaw;
            shouldUpgradeRaw = shouldUpgrade.AsFFI();
            if (shouldUpgradeRaw == null)
            {
                throw new ObjectDisposedException("ShouldUpgrade");
            }
            Raw.ClientConnector* connectorRaw;
            connectorRaw = connector.AsFFI();
            if (connectorRaw == null)
            {
                throw new ObjectDisposedException("ClientConnector");
            }
            Raw.IronrdpBlockingFfiResultBoxUpgradedBoxIronRdpError result = Raw.IronRdpBlocking.MarkAsUpgraded(shouldUpgradeRaw, connectorRaw);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.Upgraded* retVal = result.Ok;
            return new Upgraded(retVal);
        }
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>ShouldUpgrade</c> allocated on Rust side.
    /// </returns>
    public static ShouldUpgrade SkipConnectBegin(ClientConnector connector)
    {
        unsafe
        {
            Raw.ClientConnector* connectorRaw;
            connectorRaw = connector.AsFFI();
            if (connectorRaw == null)
            {
                throw new ObjectDisposedException("ClientConnector");
            }
            Raw.IronrdpBlockingFfiResultBoxShouldUpgradeBoxIronRdpError result = Raw.IronRdpBlocking.SkipConnectBegin(connectorRaw);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.ShouldUpgrade* retVal = result.Ok;
            return new ShouldUpgrade(retVal);
        }
    }

    /// <exception cref="IronRdpException"></exception>
    /// <returns>
    /// A <c>ConnectionResult</c> allocated on Rust side.
    /// </returns>
    public static ConnectionResult ConnectFinalize(Upgraded upgraded, BlockingUpgradedFrame upgradedFramed, ClientConnector connector, ServerName serverName, VecU8 serverPublicKey, KerberosConfig? kerberosConfig)
    {
        unsafe
        {
            Raw.Upgraded* upgradedRaw;
            upgradedRaw = upgraded.AsFFI();
            if (upgradedRaw == null)
            {
                throw new ObjectDisposedException("Upgraded");
            }
            Raw.BlockingUpgradedFrame* upgradedFramedRaw;
            upgradedFramedRaw = upgradedFramed.AsFFI();
            if (upgradedFramedRaw == null)
            {
                throw new ObjectDisposedException("BlockingUpgradedFrame");
            }
            Raw.ClientConnector* connectorRaw;
            connectorRaw = connector.AsFFI();
            if (connectorRaw == null)
            {
                throw new ObjectDisposedException("ClientConnector");
            }
            Raw.ServerName* serverNameRaw;
            serverNameRaw = serverName.AsFFI();
            if (serverNameRaw == null)
            {
                throw new ObjectDisposedException("ServerName");
            }
            Raw.VecU8* serverPublicKeyRaw;
            serverPublicKeyRaw = serverPublicKey.AsFFI();
            if (serverPublicKeyRaw == null)
            {
                throw new ObjectDisposedException("VecU8");
            }
            Raw.KerberosConfig* kerberosConfigRaw;
            if (kerberosConfig == null)
            {
                kerberosConfigRaw = null;
            }
            else
            {
                kerberosConfigRaw = kerberosConfig.AsFFI();
                if (kerberosConfigRaw == null)
                {
                    throw new ObjectDisposedException("KerberosConfig");
                }
            }
            Raw.IronrdpBlockingFfiResultBoxConnectionResultBoxIronRdpError result = Raw.IronRdpBlocking.ConnectFinalize(upgradedRaw, upgradedFramedRaw, connectorRaw, serverNameRaw, serverPublicKeyRaw, kerberosConfigRaw);
            if (!result.isOk)
            {
                throw new IronRdpException(new IronRdpError(result.Err));
            }
            Raw.ConnectionResult* retVal = result.Ok;
            return new ConnectionResult(retVal);
        }
    }

    /// <summary>
    /// Returns the underlying raw handle.
    /// </summary>
    public unsafe Raw.IronRdpBlocking* AsFFI()
    {
        return _inner;
    }

    /// <summary>
    /// Destroys the underlying object immediately.
    /// </summary>
    public void Dispose()
    {
        unsafe
        {
            if (_inner == null)
            {
                return;
            }

            Raw.IronRdpBlocking.Destroy(_inner);
            _inner = null;

            GC.SuppressFinalize(this);
        }
    }

    ~IronRdpBlocking()
    {
        Dispose();
    }
}
