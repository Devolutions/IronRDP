[package]
name = "ironrdp"
version = "0.1.0"
edition = "2021"
readme = "README.md"
license = "MIT/Apache-2.0"
homepage = "https://github.com/Devolutions/IronRDP"
repository = "https://github.com/Devolutions/IronRDP"
authors = ["Devolutions Inc. <infos@devolutions.net>"]

[lib]
crate-type = ["cdylib"]

[features]
default = ["panic_hook"]
panic_hook = ["dep:console_error_panic_hook"]

[workspace]
members = ["."]

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"

[dependencies]

# RDP protocol
ironrdp = { path = "../../ironrdp" }
ironrdp-session = { path = "../../ironrdp-session", features = ["dgw_ext"] } # FIXME: secret feature until session state machine is done
ironrdp-input = { path = "../../ironrdp-input" }
sspi = "0.7"

# Wasm
wasm-bindgen = "0.2.83"
wasm-bindgen-futures = "0.4.33"
js-sys = "0.3.60"
gloo-net = "0.2.4"

# Enable WebAssembly support for a few crates
getrandom = { version = "*", features = ["js"] }
chrono = { version = "0.4", features = ["wasmbind"] }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }

# Async
futures-util = { version = "0.3", features = ["sink", "io"] }
futures-channel = "0.3"

# Logging
console_log = "0.2.0"
log = "0.4.17"

# Utils
anyhow = "1"
smallvec = "1.10.0"
